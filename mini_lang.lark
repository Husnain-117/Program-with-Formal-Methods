?start: statement+

?statement: assignment
          | if_statement
          | while_loop
          | for_loop
          | assert_stmt
          | block

// Assignment: variable := expression (used for standalone assignments)
assignment: VAR ":=" expr ";"

// Assignment for for loop: variable := expression (no semicolon)
for_assignment: VAR ":=" expr

// Assertion: assert(condition)
assert_stmt: "assert" "(" condition ")" ";"

// If statement: if (condition) { statements } [else { statements }]
if_statement: "if" "(" condition ")" block ["else" block]

// While loop: while (condition) { statements }
while_loop: "while" "(" condition ")" block

// For loop: for (init; condition; update) { statements }
for_loop: "for" "(" for_assignment ";" condition ";" for_assignment ")" block

// Block: { statements }
block: "{" statement+ "}"

// Expression: arithmetic operations
?expr: term
     | expr "+" term   -> add
     | expr "-" term   -> sub

?term: factor
     | term "*" factor -> mul
     | term "/" factor -> div

?factor: NUMBER -> number
       | VAR    -> var
       | "(" expr ")"

// Condition: expression comparator expression
?condition: expr comparator expr

?comparator: COMP
COMP: "==" | "!=" | "<" | "<=" | ">" | ">="

VAR: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /[0-9]+/

%ignore /[ \t\r\n]+/
%ignore /\/\/[^\n]*/   // single line comment